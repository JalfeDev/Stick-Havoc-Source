<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MaskMouse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
insS = noone
image_alpha = 0
bolKey = 0
insW = noone
bolTransfer = 0
bolWrite = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Matriz de Teclas
arrP[0,0]  = "Player 1"      //Nombre
arrP[0,1]  = c_white         //Color
arrP[0,2]  = spr_PlayerW     //Shader

arrP[0,3]  = ord("A")        //Izquierda
arrP[0,4]  = ord("D")        //Dereca
arrP[0,5]  = ord("W")        //Arriba
arrP[0,6]  = ord("S")        //Abajo

arrP[0,7]  = ord("1")        //Slot 1
arrP[0,8]  = ord("2")        //Slot 2
arrP[0,9]  = ord("3")        //Slot 3
arrP[0,10] = ord("4")        //Slot 4

arrP[0,11] = ord("E")        //Interactuar
arrP[0,12] = ord("V")        //Disparar


arrP[1,0]  = "Player 2"
arrP[1,1]  = c_white
arrP[1,2]  = spr_PlayerW

arrP[1,3]  = vk_left
arrP[1,4]  = vk_right
arrP[1,5]  = vk_up
arrP[1,6]  = vk_down

arrP[1,7]  = ord("7")
arrP[1,8]  = ord("8")
arrP[1,9]  = ord("9")
arrP[1,10] = ord("0")

arrP[1,11] = ord("N")
arrP[1,12] = ord("M")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control de ventanas
x = mouse_x
y = mouse_y
if (room != rm_Batalla) || (room != rm_ScottCawthon)
{
    insW = instance_place(x, y, obj_Window);
    var mbLeft = mouse_check_button(mb_left);
    var mbLeftR = mouse_check_button_released(mb_left);
    
    if (insS == noone)
    {
        if (insW != noone) &amp;&amp; (insW.strMode != "")
        {
            insW.sprOutline = spr_WSelect
            insW.sprFill = 1
            
            if (mbLeft)
            {
                insW.sprOutline = spr_WPress
                insW.sprFill = 2
            }
            bolWrite = 0
        }
    }
    else
    {
        insS.sprOutline = spr_WDefault
        insS.sprFill = 0
    }

    if (mbLeftR)
    {
        if (insW != noone) &amp;&amp; (insW.strMode != "")
        {
            if (insS == noone) || (insS == insW) insS = insW
            else if (insS != insW) insS = noone
        }
        else if (insW == noone) insS = noone
    }
    
    if (insS != noone)
    {
        switch(insS.strMode)
        {
            case "boxtext":
                if (bolWrite)
                {
                    if (string_width(insS.strText) &lt; insS.image_xscale-32) || keyboard_check_pressed(vk_backspace) insS.strText = keyboard_string
                    else keyboard_string = insS.strText
                }
                
                if (mbLeftR) &amp;&amp; (insW != noone)
                {
                    if (insW == insS)
                    {
                        bolWrite = true
                        keyboard_string = insS.strText
                        insS.strText = keyboard_string
                    }
                    else
                    {
                        bolWrite = false
                        keyboard_string = insS.strText
                    }
                }
                
            break
            
            case "palette":
                if (mbLeftR)
                {
                    arrColor[0] = c_white
                    arrColor[1] = c_red
                    arrColor[2] = c_yellow
                    arrColor[3] = c_green
                    arrColor[4] = c_aqua
                    arrColor[5] = c_blue
                    
                    var colX = 0
                    var colY = 0;
                    var intColumns = 0
                    var intRows = 0
                    for(i = 0; i &lt; array_length_1d(arrColor); i++)
                    {
                        colX = insS.x + (insS.image_xscale/1.4) + 38 * intColumns
                        colY = insS.y - (insS.image_yscale/1.4) + 38 * intRows
                        
                        var insM = instance_create(insS.x+(insS.image_xscale/1.4)-4, insS.y-(insS.image_yscale/1.4)-4, obj_Depth);
                        insM.strMode = "color"
                        insM.insBefore = insS
                        insM.image_xscale = 128
                        insM.image_yscale = 88
                        insM.depth = insS.depth-10
                        insM.intP = insS.intP
                        
                        var insC = instance_create(colX, colY, obj_Color);
                        insC.image_blend = arrColor[i]
                        insC.intP = insS.intP
                        
                        intColumns++
                        if(intColumns == 3)
                        {
                            intColumns = 0
                            intRows++
                        }
                    }
                }
            break
            
            case "room":
                if (mbLeftR)
                {
                    room_goto(insS.intRoom)
                    insS = noone
                }
            break
            
            case "key":
                if (mbLeftR) bolKey = true
                
                if (bolKey)
                {
                    var insKS = instance_create(insS.x, insS.y, obj_Depth);
                    insKS.image_xscale = 220
                    insKS.image_yscale = 72
                    insKS.insBefore = insS
                    insKS.depth = insS.depth-9
                    insKS.strMode = "key_ad"
                    insKS.intF = fntNormal
                    insKS.strText = "Presione cualquier # tecla"
                    
                    if keyboard_check_pressed(vk_anykey)
                    {
                        arrP[insS.intP,insS.numKey] = keyboard_key
                        insS = noone
                        bolKey = 0
                    }
                }
            break
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Al estar en la batalla
if (room == rm_Batalla) || (room == rm_ScottCawthon)
{
    if (!bolTransfer) &amp;&amp; instance_exists(obj_Player) &amp;&amp; instance_exists(obj_Player2)
    {
        obj_Player.strName = arrP[0,0]
        obj_Player.shd = arrP[0,2]
        
        obj_Player.chrLeft = arrP[0,3]
        obj_Player.chrRight = arrP[0,4]
        obj_Player.chrUp = arrP[0,5]
        obj_Player.chrDown = arrP[0,6]
        
        obj_Player.chr1 = arrP[0,7]
        obj_Player.chr2 = arrP[0,8]
        obj_Player.chr3 = arrP[0,9]
        obj_Player.chr4 = arrP[0,10]
        
        obj_Player.chrAct   = arrP[0,11]
        obj_Player.chrAttack = arrP[0,12]
        
        
        obj_Player2.strName = arrP[1,0]
        obj_Player2.shd = arrP[1,2]
        
        obj_Player2.chrLeft = arrP[1,3]
        obj_Player2.chrRight = arrP[1,4]
        obj_Player2.chrUp = arrP[1,5]
        obj_Player2.chrDown = arrP[1,6]
        
        obj_Player2.chr1 = arrP[1,7]
        obj_Player2.chr2 = arrP[1,8]
        obj_Player2.chr3 = arrP[1,9]
        obj_Player2.chr4 = arrP[1,10]
        
        obj_Player2.chrAct   = arrP[1,11]
        obj_Player2.chrAttack = arrP[1,12]
        bolTransfer = true
    }
}
else if (bolTransfer) bolTransfer = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

draw_set_halign(fa_left)
draw_set_font(fntNormal)
draw_set_colour(c_white)
if (room != rm_Batalla) &amp;&amp; (room != rm_ScottCawthon) &amp;&amp; (room != rm_Tutorial)  draw_text(8, 16, "Version: " + global.strVersion)
/*
draw_text(8, 32, "arrP[0,0] = " + string(arrP[0,0]))
draw_text(8, 48, "bolWrite = " + string(bolWrite))
if (insS != noone) draw_text(8, 64, "strText = " + string(insS.strText))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
