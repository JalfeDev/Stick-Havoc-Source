<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
randomize()

xrandom = irandom_range(32, room_width-32)
yrandom = 16

display_set_gui_maximise(1.7,1.7)

obP[0] = obj_Player//instance_create(64, 576, obj_Player)  //1
instance_create(64, 576, obj_FP)

intWP = 0
subImg = 0
subImg2 = 0
bolDebug = 0
fntNum = font_add_sprite_ext(spr_FntNum, "1234567890/", 1, 1)
srfIn = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Del jugador1
var drawL, drawR, drawU, drawD
drawL = 0+4
drawR = 758-4//680-4
drawU = 0+4
drawD = 400-4//384-4
draw_set_alpha(0.7)
draw_set_colour(c_red)
//draw_rectangle(drawL, drawU, drawR, drawD, 0)
draw_set_alpha(1)

if instance_exists(obP[0])
{
    var oP = obP[0];    
    //Nombre
    draw_set_colour(c_black)
    draw_rectangle(drawL-4, drawU-4, drawL-4+(string_width(obP[0].strName)/2), drawU+8, 0)
    
    draw_set_colour(c_white)
    draw_set_font(fnt)
    draw_set_halign(fa_left)
    draw_text(drawL+2, drawU+6, oP.strName)
    
    //Cuadros de Armas
    draw_set_font(fnt)
    draw_set_halign(fa_right)
    var intC = 0
    var intR = 0
    for(var i=0; i &lt; 4; i++)
    {
        draw_sprite(spr_GunGUI, oP.arrSlot[i,0], drawL + 20 + 48*intC, drawU + 44 + 36*intR)
        draw_set_font(fnt)
        draw_set_halign(fa_right)
        draw_text(drawL + 42 + 48*intC, drawU + 58 + 36*intR, oP.arrBullet[oP.arrSlot[i,0]])
        intC++
        if (intC == 2)
        {
            intC = 0
            intR++
        }
    }
    
    //Power-Up
    draw_sprite(spr_PowerUpGUI, oP.numPowerUp, drawL+104, 80)
    if (oP.numPowerUp != 0)
    {
        draw_set_alpha(0.6)
        draw_set_colour(c_dkgray)
        draw_rectangle(drawL+104-12, 80+12-(oP.timePU/12.5), drawL+104+12, 80+12, 0)
        draw_set_alpha(1)
    }
       
    //Bara de vida faltante
    draw_set_alpha(0.7)
    draw_set_colour(c_maroon)
    draw_rectangle(drawL-2, drawU + 20, drawL+90, drawU+25, 0)
    draw_set_alpha(1)
    draw_set_colour(c_white)
    //Barra de vida
    var intLH = (oP.intHealth*93)/100
    draw_sprite_stretched(spr_Bar, 0, drawL-2, drawU + 20, intLH, sprite_get_height(spr_Bar))
    draw_set_font(fntNum)
    draw_text(drawL + 56, drawU + 20, string(oP.intHealth) + "/100")
    //Escudo
    draw_set_alpha(0.65)
    var intSH = (oP.numShield*93)/100
    draw_sprite_stretched(spr_Bar, 1, drawL-2, drawU + 20, intSH, sprite_get_height(spr_Bar))
    draw_set_alpha(1)
        
    //Arma seleccionada
    switch(oP.intNumGun)
    {
        case 0:
            intC = 0
            intR = 0
        break
        
        case 1:
            intC = 1
            intR = 0
        break
        
        case 2:
            intC = 0
            intR = 1
        break
        
        case 3:
            intC = 1
            intR = 1
        break
    }
    draw_sprite(spr_Select, 0, drawL + 20 + 48*intC, drawU + 44 + 36*intR)
    
    //Curando
    if (oP.numHealing != -1)
    {
        if (subImg &lt; oP.arrWeapon[oP.arrSlot[oP.numHealing,0],2])
        {
            subImg += 33 / oP.arrWeapon[oP.arrSlot[oP.numHealing,0],2]
        }
        draw_sprite(spr_Reloading, subImg, drawL + 20 + 48*intC, drawU + 44 + 36*intR)
    }
    else
    {
        subImg = 0
    }
    /*
    //Horizontal
    if (oP.x &lt; 0)
    {
        if (oP.y &lt; 0)
        {
            draw_sprite(spr_PlayerFar, 5, drawL+16, drawU+16)        //Izquierda-arriba
            draw_sprite_stretched(oP.shd, 0, drawL+6, drawU+6, 20, 20)
        }
        else
        {
            draw_sprite(spr_PlayerFar, 6, drawL+16, oP.y)        //Izquierda
            draw_sprite_stretched(oP.shd, 0, drawL+6, oP.y-10, 20, 20)
        }
    }
    if (oP.x &gt; room_width)
    {
        if (oP.y &gt; room_height)
        { 
            draw_sprite(spr_PlayerFar, 1, drawR-16, drawD-16)        //Derecha-abajo
            draw_sprite_stretched(oP.shd, 0, drawR-26, drawD-26, 20, 20)
        }
        else
        {
            draw_sprite(spr_PlayerFar, 2, drawR-16, oP.y)        //Derecha
            draw_sprite_stretched(oP.shd, 0, drawR-26, oP.y-10, 20, 20)
        }
    }
    //Vertical
    if (oP.y &lt; 0)
    {
        if (oP.x &gt; room_width)
        {
            draw_sprite(spr_PlayerFar, 3, drawR-16, drawU+16)         //Arriba-derecha
            draw_sprite_stretched(oP.shd, 0, drawR-26, drawU+6, 20, 20)
        }
        else
        {
            draw_sprite(spr_PlayerFar, 4, oP.x, drawU+16)         //Arriba
            draw_sprite_stretched(oP.shd, 0, oP.x-10, drawU+6, 20, 20)
        }
    }
    if (oP.y &gt; room_height)
    {
        if (oP.x &lt; 0)
        {
            draw_sprite(spr_PlayerFar, 7, drawL+16, drawD-16)         //Abajo-izquierda
            draw_sprite_stretched(oP.shd, 0, drawL+6, drawD-26, 20, 20)
        }
        else
        {
            draw_sprite(spr_PlayerFar, 0, oP.x, drawD-16)         //Abajo
            draw_sprite_stretched(oP.shd, 0, oP.x-10, drawD-26, 20, 20)
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
if instance_exists(obj_Player)
{
    var midX = 356;
    if (bolDebug)
    {
        draw_set_colour(c_black)
        draw_rectangle(midX-144, drawU-4, midX, drawU+148,0)
        draw_set_halign(fa_left)
        draw_set_font(fnt)
        draw_set_colour(c_white)
        
        //draw_text(midX-128, drawU+8, "numHealing = " + string(obj_Player.numHealing))
        
        for(var i=0; i &lt; array_length_1d(obj_Player.arrBullet); i++)
        {
            draw_text(midX-128, drawU+8+(10*i), "arrBullet[" + string(i) + "] = " + string(obj_Player.arrBullet[i]))
        }
        
        for(var i=0; i &lt; 4; i++)
        {
            draw_text(midX-128, drawU+108+(20*i), "arrSlot[" + string(i) + ",0] = " + string(obj_Player.arrSlot[i,0]));
            draw_text(midX-128, drawU+118+(20*i), "arrSlot[" + string(i) + ",2] = " + string(obj_Player.arrSlot[i,1]));
        }
        
        draw_text(midX-128, drawU+188, "intNumGun = " + string(obj_Player.intNumGun))
        
        //draw_text(midX-128, drawU+108, "view_wview = " + string(view_wview[0]))
        //draw_text(midX-128, drawU+118, "view_hview = " + string(view_hview[0]))
        
        //draw_text(midX-128, drawU+128, "numShield = " + string(obP[0].numShield))
        
        //draw_text(midX-128, drawU+138, "srfIn = " + string(surface_exists(srfIn)))
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jugador 1
if keyboard_check_pressed(vk_enter) bolDebug = !bolDebug;

if instance_exists(obP[0])
{
    var oP= obP[0]
    //Armas del jugador
    if (oP.arrSlot[oP.intNumGun,0] != 0)
    {
        draw_sprite_ext(oP.arrWeapon[oP.arrSlot[oP.intNumGun,0],7], 0, oP.x, oP.y, oP.image_xscale, oP.image_yscale, oP.image_angle, oP.image_blend, oP.image_alpha)
    }
    
    //Escudo
    if (oP.numShield &gt; 0)
    {
        draw_sprite(spr_Shield, 0, oP.x, oP.y)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_Menu)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
