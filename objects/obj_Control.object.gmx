<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Generacion de cajas
randomize()
alarm[0] = irandom_range(200, 300)
alarm[1] = irandom_range(450, 600)
xrandom = irandom_range(32, room_width-32)
yrandom = 16

//Controlador de la View
view_wstart = view_wview[0]
view_hstart = view_hview[0]
intM = 1        //Multiplicador de la view

//La GUI
intMGUI = 1   //El multiplicador del GUI
//Esto hizo que la parte derecha de la GUI se jodiese
display_set_gui_maximise(intMGUI, intMGUI)

obP[0] = instance_create(64, 576, obj_Player)  //1
obP[1] = instance_create(80, 576, obj_Player2) //2
instance_create(64, 576, obj_FP)
instance_create(80, 576, obj_FP2)

intWP = 0
subImg = 0
subImg2 = 0
bolDebug = 0
fntNum = font_add_sprite_ext(spr_FntNum, "1234567890/.,", 1, 1)
srfIn = 1

if (!audio_is_playing(sndGunBass)) audio_play_sound(sndGunBass, 1, true)
audio_sound_gain(sndGunBass, global.BGMVol/100, 50)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creador de cajas especiales
randomize()
alarm[1] = irandom_range(390, 510)

if (instance_number(obj_SpBox) &lt; 5) instance_create(xrandom, yrandom, obj_SpBox)

xrandom = irandom_range(32,room_width-32)
yrandom = 16
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creador de cajas
randomize()
alarm[0] = 150//irandom_range(390, 510)


if (instance_number(obj_Caja) &lt; 10) instance_create(xrandom, yrandom, obj_Caja);

xrandom = irandom_range(32,room_width-32)
yrandom = 16
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Re-ajuste de la view
var intMargin = 128;

view_visible[0] = 1
view_enabled = 1

if (instance_exists(obP[0]) &amp;&amp; instance_exists(obP[1]))
{
    view_xview[0] = min(obj_FP2.x, obj_FP.x)-intMargin
    view_yview[0] = min(obj_FP2.y, obj_FP.y)-intMargin
    
    var maxW = max(obj_FP2.x-view_xview[0], obj_FP.x-view_xview[0])+intMargin;
    var maxH = max(obj_FP2.y-view_yview[0], obj_FP.y-view_yview[0])+intMargin;
    intM = max(maxW/view_wstart, maxH/view_hstart);
    
    if (intM &lt; 1)
    {
        view_wview[0] = view_wstart;
        view_hview[0] = view_hstart;
    }
    else
    {
        view_wview[0] = view_wstart*intM;
        view_hview[0] = view_hstart*intM;
    }
}
else
{
    if instance_exists(obP[0])
    {
        repeat(abs(obP[0].x - (view_xview[0] + view_wstart/2))){view_xview[0] += sign(obP[0].x - (view_xview[0] + view_wstart/2))}
        repeat(abs(obP[0].y - (view_yview[0] + view_hstart/2))){view_yview[0] += sign(obP[0].y - (view_yview[0] + view_hstart/2))}
    }
    else if instance_exists(obP[1])
    {
        repeat(abs(obP[1].x - (view_xview[0] + view_wstart/2))){view_xview[0] += sign(obP[1].x - (view_xview[0] + view_wstart/2))}
        repeat(abs(obP[1].y - (view_yview[0] + view_hstart/2))){view_yview[0] += sign(obP[1].y - (view_yview[0] + view_hstart/2))}
    }
    repeat(view_wview[0]-view_wstart){view_wview[0]--}
    repeat(view_hview[0]-view_hstart){view_hview[0]--}
}

//Para que no se salga
if (view_xview[0]+view_wview[0] &gt; room_width) view_xview[0] = room_width-view_wview[0]
else if (view_xview[0] &lt; 0) view_xview[0] = 0

if (view_wview[0] &gt; room_width)
{
    view_wview[0] = room_width
    view_xview[0] = 0
}

if (view_yview[0]+view_hview[0] &gt; room_height) view_yview[0] = room_height-view_hview[0]
else if (view_yview[0] &lt; 0) view_yview[0] = 0

if (view_hview[0] &gt; room_height)
{
    view_hview[0] = room_height
    view_yview[0] = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parar la cancion
audio_stop_sound(sndGunBass)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Del jugador1
var drawL, drawR, drawU, drawD
drawL = 4
drawR = ceil(view_wport[0] / intMGUI) - 4
drawU = 4
drawD = ceil(view_hport[0] / intMGUI) - 4

if (instance_exists(obP[0]))
{
    draw_set_font(fnt)
    //Caja negra
    draw_set_colour(c_black)
    draw_rectangle(0, 0, string_width(obP[0].strName)+4, 12, 0)
    //Nombre
    draw_set_colour(c_white)    //Hasta aqui esta bien
              //Aqui esta a la mitad
    draw_set_halign(fa_left)
    draw_text(6, 10, obP[0].strName)
    
    //Cuadros de Armas
    draw_set_font(fnt)
    draw_set_halign(fa_right)
    var intC = 0
    var intR = 0
    for(var i=0; i &lt; 4; i++)
    {
        draw_sprite(spr_GunGUI, obP[0].arrSlot[i,0], drawL + 20 + 48*intC, drawU + 44 + 36*intR)
        draw_set_font(fnt)
        draw_set_halign(fa_right)
        draw_text(drawL + 42 + 48*intC, drawU + 58 + 36*intR, obP[0].arrBullet[obP[0].arrSlot[i,0]])
        intC++
        if (intC == 2)
        {
            intC = 0
            intR++
        }
    }
    
    //Power-Up
    draw_sprite(spr_PowerUpGUI, obP[0].numPowerUp, drawL+104, 80)
    if (obP[0].numPowerUp != 0)
    {
        draw_set_alpha(0.6)
        draw_set_colour(c_dkgray)
        draw_rectangle(drawL+92, 80+12-(obP[0].timePU/12.5), drawL+116, 80+12, 0)
        draw_set_alpha(1)
    }
       
    //Bara de vida faltante
    draw_set_alpha(0.7)
    draw_set_colour(c_maroon)
    draw_rectangle(2, 24, 93, 29, 0)
    draw_set_alpha(1)
    draw_set_colour(c_white)
    //Barra de vida
    var intLH = (obP[0].intHealth*92)/100
    draw_sprite_stretched(spr_Bar, 0, 2, 24, intLH, 6)
    draw_set_font(fntNum)
    draw_text(drawL + 56, drawU + 20, string(obP[0].intHealth) + "/100")
    //Escudo
    draw_set_alpha(0.65)
    var intSH = (obP[0].numShield*92)/100
    draw_sprite_stretched(spr_Bar, 1, 2, 24, intSH, 6)
    draw_set_alpha(1)
        
    //Arma seleccionada
    switch(obP[0].intNumGun)
    {
        case 0:
            intC = 0
            intR = 0
        break
        
        case 1:
            intC = 1
            intR = 0
        break
        
        case 2:
            intC = 0
            intR = 1
        break
        
        case 3:
            intC = 1
            intR = 1
        break
    }
    draw_sprite(spr_Select, 0, drawL + 20 + 48*intC, drawU + 44 + 36*intR)
    
    //Curando
    if (obP[0].numHealing != -1)
    {
        if (subImg &lt; obP[0].arrWeapon[obP[0].arrSlot[obP[0].numHealing,0],2])
        {
            subImg += 33 / obP[0].arrWeapon[obP[0].arrSlot[obP[0].numHealing,0],2]
        }
        draw_sprite(spr_Reloading, subImg, drawL + 20 + 48*intC, drawU + 44 + 36*intR)
    }
    else subImg = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Del jugador2
if (instance_exists(obP[1]))
{
    //Caja negra
    draw_set_colour(c_black)
    draw_set_font(fnt)
    draw_rectangle(drawR-string_width(obP[1].strName)-4, 0, drawR+4,12, 0)//drawR + strWidth, 0, drawR+4, 12, 0)
    //Nombre
    draw_set_colour(c_white)
    draw_set_halign(fa_right)
    draw_text(drawR+4, 10, obP[1].strName)
    draw_set_halign(fa_left)
    
    //Cuadros de Armas
    draw_set_halign(fa_right)
    var intC = 0
    var intR = 0
    for(var i=0; i &lt; 4; i++)
    {
        //Los slots de armas
        draw_sprite(spr_GunGUI, obP[1].arrSlot[i,0], drawR-24-sprite_get_width(spr_GunGUI) + 48*intC, drawU + 44 + 36*intR) 
        //El numero de balas por slot
        draw_text(drawR-46 + 48*intC, drawU + 58 + 36*intR, obP[1].arrBullet[obP[1].arrSlot[i,0]])
        intC++
        if (intC == 2)
        {
            intC = 0
            intR++
        }
    }
    
    //Power-Up
    draw_sprite(spr_PowerUpGUI, obP[1].numPowerUp, drawR-104, 80)
    if (obP[1].numPowerUp != 0)
    {
        draw_set_alpha(0.6)
        draw_set_colour(c_dkgray)
        draw_rectangle(drawR-108-12, 92-(obP[1].timePU/12.5), drawR-108+12, 92, 0)
        draw_set_alpha(1)
    }
    
    //Bara de vida faltante
    draw_set_alpha(0.7)
    draw_set_colour(c_maroon)
    draw_rectangle(drawR-90, 24, drawR+1, 29, 0)
    draw_set_alpha(1)
    draw_set_colour(c_white)
    //Barra de vida
    var intLH = obP[1].intHealth*92/100
    draw_set_font(fntNum)
    draw_sprite_stretched(spr_Bar, 0, drawR-90, 24, intLH, 6)
    draw_text(drawR - 32, drawU + 20, string(obP[1].intHealth) + "/100")
    //Escudo
    draw_set_alpha(0.65)
    var intSH = (obP[1].numShield*92)/100
    draw_sprite_stretched(spr_Bar, 1, drawR-90, 24, intSH, 6)
    draw_set_alpha(1)
    
    //Arma seleccionada
    switch(obP[1].intNumGun)
    {
        case 0:
            intC = 0
            intR = 0
        break
        
        case 1:
            intC = 1
            intR = 0
        break
        
        case 2:
            intC = 0
            intR = 1
        break
        
        case 3:
            intC = 1
            intR = 1
        break
    }
    draw_sprite(spr_Select, 0, drawR-24-sprite_get_width(spr_GunGUI) + 48*intC, drawU + 44 + 36*intR)

    //Curando
    if (obP[1].numHealing != -1)
    {
        if (subImg2 &lt; obP[1].arrWeapon[obP[1].arrSlot[obP[1].numHealing,0],2])
        {
            subImg2 += 33 / obP[1].arrWeapon[obP[1].arrSlot[obP[1].numHealing,0],2]
        }
        draw_sprite(spr_Reloading, subImg2, drawR-66 + 48*intC, drawU + 44 + 36*intR)
    }
    else
    {
        subImg2 = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Victoria/Derrota
if (!instance_exists(obP[0]))
{
    draw_set_halign(fa_center)
    
    //Victoria
    draw_set_colour(c_yellow)
    draw_set_font(fntV)
    draw_text(712/2, 380/2 - 64, "Victoria")
    
    draw_set_font(fntNormal)
    draw_text(712/2, 380/2 + 24, obP[1].strName + " gano la partida # Pulsa Ctrl para volver")
}
else if (!instance_exists(obP[1]))
{
    draw_set_halign(fa_center)
    
    draw_set_colour(c_yellow)
    draw_set_font(fntV)
    draw_text(712/2, 380/2 - 64, "Victoria")
    
    draw_set_colour(fntNormal)
    draw_text(712/2, 380/2 + 24, obP[0].strName + " gano la partida # Pulsa Ctrl para volver")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug


if instance_exists(obj_Player)
{
    var midX = (drawR+4) / 2;
    if (bolDebug)
    {
        draw_set_colour(c_black)
        draw_rectangle(midX-144, drawU-4, midX, drawU+148,0)
        draw_set_halign(fa_left)
        draw_set_font(fnt)
        draw_set_colour(c_white)
        
        draw_text(midX-128, drawU+8, "srfIn = " + string(srfIn))
        
        draw_text(midX-128, drawU+28, "wstart = " + string(view_wstart))
        draw_text(midX-128, drawU+38, "hstart = " + string(view_hstart))
        draw_text(midX-128, drawU+48, "view_wview = " + string(view_wview[0]))
        draw_text(midX-128, drawU+58, "view_hview = " + string(view_hview[0]))
        draw_text(midX-128, drawU+68, "intM = " + string(intM))
        draw_text(midX-128, drawU+78, "view_wport = " + string(view_wport[0]))
        draw_text(midX-128, drawU+88, "view_hport = " + string(view_hport[0]))
        
        draw_text(midX-128, drawU+98, "BGMVol = " + string(global.BGMVol))
        draw_text(midX-128, drawU+108, "SFXVol = " + string(global.SFXVol))//Hasta aqui bien
        
        draw_text(midX-128, drawU+128, "oP2 Name = " + obP[1].strName)
        draw_text(midX-128, drawU+138, "oP2 name width = " + string(string_width(obP[1].strName)))
    }
}
/*for(var i=0; i &lt; array_length_1d(obj_Player.arrBullet); i++)
{
    draw_text(midX-128, drawU+8+(10*i), "arrBullet[" + string(i) + "] = " + string(obj_Player.arrBullet[i]) + " " + string_copy(obj_Player.arrWeapon[i,0],1,5))
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jugador 1 armas y escudos
if instance_exists(obP[0])
{
    //Armas del jugador
    if (obP[0].arrSlot[obP[0].intNumGun,0] != 0)
    {
        draw_sprite_ext(obP[0].arrWeapon[obP[0].arrSlot[obP[0].intNumGun,0],7], 0, obP[0].x, obP[0].y, obP[0].image_xscale, obP[0].image_yscale, obP[0].image_angle, obP[0].image_blend, obP[0].image_alpha)
    }
    
    //Escudo
    if (obP[0].numShield &gt; 0)
    {
        draw_sprite(spr_Shield, 0, obP[0].x, obP[0].y)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jugador 2 armas y escudos
if instance_exists(obP[1])
{
    //Armas del jugador
    if (obP[1].arrSlot[obP[1].intNumGun,0] != 0)
    {
        draw_sprite_ext(obP[1].arrWeapon[obP[1].arrSlot[obP[1].intNumGun,0],7], 0, obP[1].x, obP[1].y, obP[1].image_xscale, obP[1].image_yscale, obP[1].image_angle, obP[1].image_blend, obP[1].image_alpha)
    }
    
    //Escudo
    if (obP[1].numShield &gt; 0)
    {
        draw_sprite(spr_Shield, 1, obP[1].x, obP[1].y)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Surface
if (room == rm_ScottCawthon)
{
    if (!surface_exists(srfIn))
    {
        srfIn = surface_create(room_width,room_height);
    }
    else
    {
        surface_set_target(srfIn)
        draw_sprite(spr_SctCaw, 0, 638, 202)
        //Dibuja el piso
        draw_set_colour(make_colour_rgb(49,38,4))//Color tierra
        draw_rectangle(0, 768, room_width, 864, 0)
        
        draw_set_blend_mode(bm_subtract)
        if instance_exists(obP[0]) draw_circle_colour(obj_Player.x,obj_Player.y,32, c_black, c_white, 0)
        if instance_exists(obP[1]) draw_circle_colour(obj_Player2.x,obj_Player2.y,32, c_black, c_white, 0)
        draw_set_blend_mode(bm_normal)
        surface_reset_target()
    }
    
    if surface_exists(srfIn) draw_surface(srfIn,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ir atras
if surface_exists(srfIn) surface_free(srfIn);
room_goto(rm_Create);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
if (!bolDebug) bolDebug = !bolDebug
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
