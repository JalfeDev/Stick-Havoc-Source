<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Movimiento
intVY   = 0
intVX   = 0
intMove = 0

intVXMax        = 7
intVYMax        = 12
/*intGroundAcc    = 1
intGroundFric   = 1.9
intAirAcc       = 0.75
intAirFric      = 0.3*/
intAcc  = 1
intFric = 1.5

//Salto
countBuffer = 0    //Contador para saltar al tocar al suelo
maxBuffer = 6      //Tiempo antes de que el salto se efectue
bolUpR = 0
intGravityNorm  = 0.8
intGravitySlide = 0.17

//Equipo
intNumGun  = 0  //El numero del slot que seleccionamos
intHealth  = 100
strName    = "Player 1"
numHealing = -1
numShield = 0
shd = spr_PlayerW

arrShot[0] = true      //Recarga del slot
arrShot[1] = true      //Son booleanas
arrShot[2] = true
arrShot[3] = true

//Power-Ups
numPowerUp = 0
intDJump = 1
intVXP = 10
intVYP = 15
bolInfBul = 0
timePU = 0

//Ataques
chrLeft = ord("A")
chrRight = ord("D")
chrUp = ord("W")
chrDown = ord("S")
chrAttack = ord("V")
chrAct = ord("E")

chr1 = ord("1")
chr2 = ord("2")
chr3 = ord("3")
chr4 = ord("4")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Matriz de armas

arrWeapon[0,0] = ""  //Nombre de arma
arrWeapon[0,1] = ""  //Daño/Cura
arrWeapon[0,2] = ""  //Tiempo de recarga
arrWeapon[0,3] = ""  //Municion Maxima
arrWeapon[0,4] = ""  //Tipo de arma
arrWeapon[0,5] = ""  //Rango
arrWeapon[0,6] = ""  //Bloom
arrWeapon[0,7] = -1  //Sprite del arma
arrWeapon[0,8] = 0   //Tipo de municion
arrWeapon[0,9] = -1  //Volumen del disparo

arrWeapon[1,0] = "Pistola"
arrWeapon[1,1] = 15
arrWeapon[1,2] = 15
arrWeapon[1,3] = 200
arrWeapon[1,4] = "Shot"
arrWeapon[1,5] = 256
arrWeapon[1,6] = 18
arrWeapon[1,7] = spr_Pistol
arrWeapon[1,8] = 1
arrWeapon[1,9] = 0.5

arrWeapon[2,0] = "Sniper"
arrWeapon[2,1] = 45
arrWeapon[2,2] = 50
arrWeapon[2,3] = 20
arrWeapon[2,4] = "Shot"
arrWeapon[2,5] = 1024
arrWeapon[2,6] = 0
arrWeapon[2,7] = spr_Sniper
arrWeapon[2,8] = 2
arrWeapon[2,9] = 0.9

arrWeapon[3,0] = "Minigun"
arrWeapon[3,1] = 7
arrWeapon[3,2] = 5
arrWeapon[3,3] = 450
arrWeapon[3,4] = "Shot"
arrWeapon[3,5] = 320
arrWeapon[3,6] = 20
arrWeapon[3,7] = spr_Minigun
arrWeapon[3,8] = 3
arrWeapon[3,9] = 0.2

arrWeapon[4,0] = "Escopeta"     //Nombre de arma
arrWeapon[4,1] = 16             //Daño/Cura
arrWeapon[4,2] = 30             //Tiempo de recarga
arrWeapon[4,3] = 50            //Municion maxima
arrWeapon[4,4] = "Shotgun"      //Tipo de arma
arrWeapon[4,5] = 64             //Rango
arrWeapon[4,6] = 0              //Bloom
arrWeapon[4,7] = spr_Shotgun    //Sprite del arma
arrWeapon[4,8] = 4              //Tipo de municion
arrWeapon[4,9] = 1              //Volumen del disparo

arrWeapon[5,0] = "Kit Bamba"
arrWeapon[5,1] = 15
arrWeapon[5,2] = 75
arrWeapon[5,3] = 15
arrWeapon[5,4] = "Health"
arrWeapon[5,5] = 0
arrWeapon[5,6] = ""
arrWeapon[5,7] = spr_Paracetamol
arrWeapon[5,8] = 5
arrWeapon[5,9] = -1

arrWeapon[6,0] = "Kit Normal"
arrWeapon[6,1] = 55
arrWeapon[6,2] = 150
arrWeapon[6,3] = 5
arrWeapon[6,4] = "Health"
arrWeapon[6,5] = 0
arrWeapon[6,6] = ""
arrWeapon[6,7] = spr_BigKit
arrWeapon[6,8] = 6
arrWeapon[6,9] = -1

arrWeapon[7,0] = "Bazuca"
arrWeapon[7,1] = 99
arrWeapon[7,2] = 225
arrWeapon[7,3] = 15
arrWeapon[7,4] = "Area"
arrWeapon[7,5] = 36
arrWeapon[7,6] = 0
arrWeapon[7,7] = spr_Bazooka
arrWeapon[7,8] = 7
arrWeapon[7,9] = 0.5

arrWeapon[8,0] = "Escudo"       //Nombre de arma
arrWeapon[8,1] = 100            //Daño/Cura/Escudo
arrWeapon[8,2] = 30             //Tiempo de recarga
arrWeapon[8,3] = 3              //Municion maxima
arrWeapon[8,4] = "Special"      //Tipo de arma
arrWeapon[8,5] = 0              //Rango
arrWeapon[8,6] = 0              //Bloom
arrWeapon[8,7] = spr_SBall      //Sprite del arma
arrWeapon[8,8] = 8              //Tipo de municion
arrWeapon[8,9] = -1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Matriz de slots
arrSlot[0,0] = 0      //Numero del arma &amp; Tipo de municion
arrSlot[0,1] = true   //Saber si esta listo para disparar

arrSlot[1,0] = 0
arrSlot[1,1] = true

arrSlot[2,0] = 0
arrSlot[2,1] = true

arrSlot[3,0] = 0
arrSlot[3,1] = true
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Matriz de balas
arrBullet[0] = 0    //Nada
arrBullet[1] = 0    //Pistolas
arrBullet[2] = 0    //Snipers
arrBullet[3] = 0    //Miniguns
arrBullet[4] = 0    //Escopetas
arrBullet[5] = 0    //MiniKits
arrBullet[6] = 0    //Kits grandes
arrBullet[7] = 0    //Explosivos
arrBullet[8] = 0    //Escudos
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recarga 3
arrSlot[3,1] = true
if (arrWeapon[arrSlot[intNumGun,0],4] == "Health") &amp;&amp; (numHealing != -1)
{
    intHealth += arrWeapon[arrSlot[intNumGun,0],1]
    if (intHealth &gt; 100) intHealth = 100
    
    arrBullet[arrSlot[intNumGun,0]]--
    numHealing = -1
    
    if (arrBullet[arrSlot[intNumGun,0]] == 0) arrSlot[intNumGun,0] = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recarga 2
arrSlot[2,1] = true
if (arrWeapon[arrSlot[intNumGun,0],4] == "Health") &amp;&amp; (numHealing != -1)
{
    intHealth += arrWeapon[arrSlot[intNumGun,0],1]
    if (intHealth &gt; 100) intHealth = 100
    
    arrBullet[arrSlot[intNumGun,0]]--
    numHealing = -1
    
    if (arrBullet[arrSlot[intNumGun,0]] == 0) arrSlot[intNumGun,0] = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recarga 1
arrSlot[1,1] = true
if (arrWeapon[arrSlot[intNumGun,0],4] == "Health") &amp;&amp; (numHealing != -1)
{
    intHealth += arrWeapon[arrSlot[intNumGun,0],1]
    if (intHealth &gt; 100) intHealth = 100
    
    arrBullet[arrSlot[intNumGun,0]]--
    numHealing = -1
    
    if (arrBullet[arrSlot[intNumGun,0]] == 0) arrSlot[intNumGun,0] = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recarga 0
arrSlot[0,1] = true
if (arrWeapon[arrSlot[intNumGun,0],4] == "Health") &amp;&amp; (numHealing != -1)
{
    intHealth += arrWeapon[arrSlot[intNumGun,0],1]
    if (intHealth &gt; 100) intHealth = 100
    
    arrBullet[arrSlot[intNumGun,0]]--
    numHealing = -1
    
    if (arrBullet[arrSlot[intNumGun,0]] == 0) arrSlot[intNumGun,0] = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desplazamiento
var keyLeft, keyRight, keyDown,  keyJump, keyJumpRelease

keyLeft        = -keyboard_check(chrLeft)
keyRight       = keyboard_check(chrRight)
keyJump        = keyboard_check_pressed(chrUp)
keyJumpRelease = keyboard_check_released(chrUp)
keyDown        = keyboard_check_pressed(chrDown)
intMove = keyLeft + keyRight

//Comprobacion de colisiones
intColLeft  = place_meeting(x - 1, y, obj_Block)
intColRight = place_meeting(x + 1, y, obj_Block)
bolGround   = scr_Suelo()
insMovilH   = instance_place(x, y + 1, obj_MovilH)
insMovilF   = instance_place(x, y + 1, obj_MovilF)

/*//Aceleracion y friccion 
if (!bolGround)
{
   intTempAcc = intAirAcc
   intTempFric = intAirFric
}
else
{
   intTempAcc = intGroundAcc
   intTempFric = intGroundFric
}*/

//Velocidad horizontal
if (intMove != 0) intVX = scr_Approach(intVX, intVXMax * intMove, intAcc)
else intVX = scr_Approach(intVX, intVXMax * intMove, intFric)

//Velocidad sobre plataformas moviles
if (instance_place(x, y + 1, obj_MovilH)) &amp;&amp; (!instance_place(x, y, obj_MovilH)) x += insMovilH.intVX

//Velocidad vertical
if (!bolGround)
{
   if (intColLeft || intColRight) &amp;&amp; (intVY &gt;= 0) intVY = scr_Approach(intVY, intVYMax, intGravitySlide)
   else intVY = scr_Approach(intVY, intVYMax, intGravityNorm)
}

//Caida desde una plataforma
if (keyDown) &amp;&amp; place_meeting(x, y + 1, obj_Plataforma) y++
else if (keyDown) &amp;&amp; place_meeting(x, y + 1, obj_MovilH) y++
else if (keyDown) &amp;&amp; place_meeting(x, y + 1, obj_MovilV) y+=2

//Salto
//if (keyJump &amp;&amp; bolGround) intVY = -intVYMax
if (keyJump) 
{
    bolUpR = 0
    countBuffer = maxBuffer
}
else bolUpR = 1

if (countBuffer &gt; 0)
{
    countBuffer--
    if (bolGround)
    {
        intVY = -intVYMax*1.1
    }
    
    if (keyJumpRelease) || (!keyboard_check(chrUp) &amp;&amp; bolUpR)
    {
       bolUpR = 0
       if (intVY &lt; 0)
       {
          intVY *= 0.5
       }
    }
}

/*//Salto variable
if (keyJumpRelease)
{
   if (intVY &lt; 0)
   {
      intVY *= 0.5 
   }
}*/

//Salto de pared
if (intColLeft &amp;&amp; keyJump &amp;&amp; !bolGround)
{
  if (intMove &lt; 0)
  {
    intVX = intVXMax * 0.5
    intVY = -intVYMax
  }
  else
  {
    intVX = intVXMax
    intVY = -intVYMax * 0.75
  }
}

if (intColRight &amp;&amp; keyJump &amp;&amp; !bolGround)
{
  if (intMove &gt; 0)
  {
    intVX = -intVXMax * 0.5
    intVY = -intVYMax
  }
  else
  {
    intVX = -intVXMax
    intVY = -intVYMax * 0.75
  }
}

//Colision horizontal
repeat(abs(intVX))
{
  //Cuesta arriba
  if (place_meeting(x + sign(intVX), y, obj_Block) &amp;&amp; !place_meeting(x + sign(intVX), y - 1, obj_Block)) y--
  
  //Cuesta abajo
  if (!place_meeting(x + sign(intVX), y, obj_Block) &amp;&amp; !place_meeting(x + sign(intVX), y + 1, obj_Block) &amp;&amp; place_meeting(x + sign(intVX), y + 2, obj_Block))y++
  
  //Normal
  if (!place_meeting(x + sign(intVX), y, obj_Block))
  {
    x += sign(intVX) 
  }
  else
  {
    intVX = 0
    break
  }
}

//Caida del obj_MovilF
if(intVY == 0) &amp;&amp; (insMovilF != noone)
{
    with(insMovilF)
    {
        if(!bolFalling) &amp;&amp; (other.y - y &lt;= -20)
        {
            bolFalling = true
            alarm[0] = 5
        }
    }
}

//Colision vertical
repeat(abs(intVY))
{
   if (place_meeting(x, y + sign(intVY), obj_Block))
   {
      intVY = 0
      break
   }
   else if place_meeting(x, y+1, obj_Plataforma)&amp;&amp; !place_meeting(x, y, obj_Plataforma) &amp;&amp; (intVY &gt;= 0)
   {
      intVY = 0
      break
   }
   else if (place_meeting(x, y + 1, obj_MovilH)) &amp;&amp; !place_meeting(x, y, obj_MovilH) &amp;&amp; (intVY &gt;= 0)
   {
      if(intMove == 0) intVX = 0
      intVY = 0
      break
   }
   else if (place_meeting(x, y + sign(intVY)+1, obj_MovilV)) &amp;&amp; !place_meeting(x, y, obj_MovilV) &amp;&amp; (intVY &gt;= 0)
   {
      intVY = instance_place(x, y+sign(intVY)+1, obj_MovilV).intVY
      break
   }
   else if place_meeting(x, y + sign(intVY), obj_MovilF) &amp;&amp; !place_meeting(x, y, obj_MovilF) &amp;&amp; (intVY &gt;= 0)
   {
      intVY = 0
      break
   }
   else y += sign(intVY)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disparo
var keyShootS, keyShootP

keyShootI = keyboard_check_pressed(chrAttack)
keyShootS = keyboard_check(chrAttack)
keyShootR = keyboard_check_released(chrAttack);

//var intGunS = arrSlot[intNumGun,0];
var intBulT = arrSlot[intNumGun,0];

if (numShield &lt; 0) numShield = 0

if (numHealing != -1)
{
    if (intNumGun != numHealing)
    {
        alarm[numHealing] = -1;
        arrSlot[numHealing,1] = true;
        numHealing = -1;
    }
}

//Seleccion de armas
if keyboard_check_pressed(chr1) intNumGun = 0
else if keyboard_check_pressed(chr2) intNumGun = 1
else if keyboard_check_pressed(chr3) intNumGun = 2
else if keyboard_check_pressed(chr4) intNumGun = 3

if(intMove != 0) image_xscale = intMove

if (intBulT != 0) &amp;&amp; (arrSlot[intNumGun,1]) &amp;&amp; (keyShootS) &amp;&amp; (arrBullet[intBulT] &gt; 0 || bolInfBul)
{
    switch(arrWeapon[intBulT,4])
    {
        case "Shot":
            intRnd = arrWeapon[intBulT,6]
            var insBala = instance_create(x + 4 * image_xscale, y+2, obj_Bala);
            insBala.intId = id
            insBala.intVX = 16*image_xscale  
            insBala.image_xscale = image_xscale
            insBala.intDamage    = arrWeapon[intBulT,1]
            
            insBala.intRange     = arrWeapon[intBulT,5]
            insBala.image_angle  = irandom_range(intRnd/-2, intRnd/2)
            insBala.direction    = insBala.image_angle
            
            var sndShot = audio_play_sound(sndBullet, 2, false)
            audio_sound_gain(sndShot, arrWeapon[intBulT,9]*global.SFXVol/100, 0)
        
            alarm[intNumGun] = arrWeapon[intBulT,2]
            arrSlot[intNumGun,1] = false
            if (!bolInfBul) arrBullet[intBulT]--
        break
        
        case "Shotgun":
            var dirBala = 10
            repeat(5)
            {
                var insBala = instance_create(x + 4 * image_xscale, y - 12, obj_Bala);
                insBala.intId = id
                insBala.intVX = 12*image_xscale
                insBala.image_xscale = image_xscale
                insBala.intDamage = arrWeapon[intBulT,1]
                
                insBala.image_angle  = dirBala
                insBala.direction  = dirBala
                insBala.speed = 15*image_xscale

                dirBala -= 8
                insBala.intRange = arrWeapon[intBulT,5]
            }
            var sndShot = audio_play_sound(sndBullet, 2, false)
            audio_sound_gain(sndShot, arrWeapon[intBulT,9]*global.SFXVol/100, 0)
            
            alarm[intNumGun] = arrWeapon[intBulT,2]
            arrSlot[intNumGun,1] = false
            if (!bolInfBul) arrBullet[intBulT]--
        break
        
        case "Health":
            if (keyShootI) &amp;&amp; (intHealth &lt; 100)
            {
                alarm[intNumGun] = arrWeapon[intBulT,2]
                numHealing = intNumGun
                arrSlot[intNumGun,1] = false
            }
        break
        
        case "Area":
            if (keyShootI)
            {
                var insBala = instance_create(x+6*image_xscale, y-2, obj_Bala);
                insBala.intId = id
                insBala.intVX = 15*image_xscale  
                insBala.image_xscale = image_xscale
                insBala.intDamage = arrWeapon[intBulT,1]
                insBala.sprite_index = spr_BazookaBullet
                
                var intRnd = arrWeapon[intBulT,6];
                insBala.image_angle = irandom_range(2, intRnd)
                insBala.direction = insBala.image_angle
                
                var sndShot = audio_play_sound(sndBullet, 2, false)
                audio_sound_gain(sndShot, arrWeapon[intBulT,9]*global.SFXVol/100, 0)
                
                alarm[intNumGun] = arrWeapon[intBulT,2]
                arrSlot[intNumGun,1] = false
                if (!bolInfBul) arrBullet[intBulT]--
            }
        break
        
        case "Special":
            if (keyShootI) &amp;&amp; (numShield &lt; 100)
            {
                numShield = arrWeapon[intBulT,1]
                arrBullet[intBulT]--
            }
        break
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaccion entre armas
var keyAct = keyboard_check_pressed(chrAct);
var insB = instance_place(x, y, obj_Caja);

//Intercambio de armas
if (keyAct) &amp;&amp; (scrSlot("non-eq", 0, false)) //Ningun slot es 0
{
    if (insB != noone)
    {
        if (scrSlot("eq", insB.intRnd, false))
        {
            arrBullet[insB.intRnd] += insB.intBullet    //Aumento de balas
            with (insB)
            {instance_destroy()}
        }
        else
        {
            var intPG = arrSlot[intNumGun,0];   //1:  el numero de arma del player, es para el intercambio
            var intBoxB = insB.intBullet;       //10: el numero de balas de la caja, es para el intercambio
            
            arrSlot[intNumGun,0] = insB.intRnd  //Arma de player a arma de caja    1 -&gt; 2
            insB.intRnd = intPG                 //Arma de la caja a arma de player 2 -&gt; 1
            
            arrBullet[arrSlot[intNumGun,0]] = insB.intBullet//Las balas 2 de la nueva arma pasan al player 0 -&gt; 10
            insB.intBullet = arrBullet[intPG]   //Las balas 1 de player se van a la caja  10-&gt; 20
            arrBullet[insB.intRnd] = 0          //Dejamos las balas 1 del arma intercambiada 20 -&gt; 0
            
        }
        
        //La caja se encarga de destruirse en el caso de botiquines de escudos
        //- Si tenemos una pistola en nuestro inventario y en la caja,
        //- tendremos la municion y la caja desaparecera
    }
}

//Desaparicion de objetos
if (keyShootI)
{
    if (arrWeapon[intBulT,4] == "Special") || (arrWeapon[intBulT,4] == "Health")
    {
        if (arrBullet[intBulT] == 0)
        {
            arrSlot[intNumGun,0] = 0
            arrSlot[intNumGun,1] = true
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Muerte"
if (intHealth &lt;= 0) || (y &gt; room_height)
{
    //obj_Control.intWP = instance_furthest(x, y, obj_Player)
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Power-Ups
switch(numPowerUp)
{
    case 0:     //Nada
        intDJump = 0
        intVXMax = 6
        intVYMax = 9
        bolInfBul = 0
    break
    
    case 1:     //Doble salto
        if (!bolGround) &amp;&amp; (keyJump)
        {
            if (intDJump == 1)
            {
                intVY = -intVYMax
                intDJump = 0
            }
        }
        if (bolGround)
        {
          if(intDJump == 0) intDJump = 1
        }
    break
    
    case 2:     //Boost
        intVXMax = intVXP
        intVYMax = intVYP
    break
    
    case 3:     //Balas infinitas
        bolInfBul = 1
    break
}
if (numPowerUp != 0)
{
    timePU--
}

if (timePU == 0)
{
    numPowerUp = 0
    timePU = 300
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_sprite(shd, 0, x, y-7)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
